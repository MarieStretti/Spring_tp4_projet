package eu.ensg.Spring_tp4_projet.controller;

import eu.ensg.Spring_tp4_projet.model.Evenement;
import eu.ensg.Spring_tp4_projet.model.EvenementRepository;
import eu.ensg.Spring_tp4_projet.model.Participant;
import eu.ensg.Spring_tp4_projet.model.ParticipantRepository;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/evenement")// This means URL's start with /participant (after Application path)
public class EvenementController {

    @Autowired // This means to get the bean called participantRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EvenementRepository eventRepository;
    @Autowired
    private ParticipantRepository participantRepository;

    
    @RequestMapping(value = {"/addEvenement"}, method=RequestMethod.GET)
    public String addNewEvenement(Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Evenement e = new Evenement();
        
    	model.addAttribute("evenementForm", e);
        return "addEvenement";
        
    }
    
    
    @RequestMapping(value = { "/addEvenement"}, method = RequestMethod.POST)
    public String saveEvenement(Model model, @ModelAttribute("evenementForm")Evenement e) {

        if (e.getIntitule() != null
                && e.getIntitule().length() > 0
                && e.getTheme() != null 
                && e.getTheme().length() > 0) {
        	eventRepository.save(e);
            return "redirect:/evenement/all";
        }
        model.addAttribute("errorMessage", "Les champs Intitulé et Thème sont requis");        
        
        return "addEvenement";
    }
    

    @GetMapping(path = "/all")
    public String getAllEvents(Model model) {
        model.addAttribute("allEvents", eventRepository.findAll());
        return "allEvents";
    }
    
    
    
    
    @RequestMapping(value = {"/modifyEvenement"}, method=RequestMethod.GET)
    public String modifyEvenement(Model model, @RequestParam("id") Optional<String> evenementId) {

    	int id = Integer.parseInt(evenementId.get());
        Optional<Evenement> evenement = eventRepository.findById(id);
        
        if (evenement.isPresent()) {
        	model.addAttribute("evenementForm", evenement.get());
        	model.addAttribute("numevent", id);
            return "modifyEvenement";
        }
        return "Error";
    }
    
    @RequestMapping(path = "/modifyEvenement", method = RequestMethod.POST)
    public String saveModifiedEvenement(Model model, @ModelAttribute("evenementForm")Evenement e, @RequestParam("id") Optional<String> evenementId)
    {
    	int id = Integer.parseInt(evenementId.get());
        Optional<Evenement> evenement = eventRepository.findById(id);
        if(evenement.isPresent()) 
        {
            Evenement newEvenement = evenement.get();
            newEvenement.setDatedebut(e.getDatedebut());
            newEvenement.setNbpartmax(e.getNbpartmax());
            newEvenement.setOrganisateur(e.getOrganisateur());
            newEvenement = eventRepository.save(newEvenement);
            return "redirect:/evenement/all";
        }
        return "modifyEvenement";
    }
    
    
    @GetMapping(path="/removeEvenement")
    public String removeEvenement(Model model, @RequestParam("id") Optional<String> evenementId){
        String id = evenementId.get();
        Optional<Evenement> evenement = eventRepository.findById(Integer.parseInt(id));
    	Optional<Participant> participant = participantRepository.findById(Integer.parseInt(id));
    	
        if(evenement.isPresent()) 
        {
        	if (participant.isPresent()) {
            	participantRepository.deleteById(participant.get().getNumpers());
			}
        	eventRepository.deleteById(Integer.parseInt(id));
        } else {
            return "Il n'y a pas d'événement pour cet identifiant";
        }
        //model.addAttribute("removeMessage", "L'événement a été supprimé avec succès, ainsi que tous les participants inscrits à cet événement");
        return "redirect:/evenement/all";
    }

}
